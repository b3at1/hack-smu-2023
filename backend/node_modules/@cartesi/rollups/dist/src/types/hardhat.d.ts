/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import { ethers } from "ethers";
import {
  FactoryOptions,
  HardhatEthersHelpers as HardhatEthersHelpersBase,
} from "@nomiclabs/hardhat-ethers/types";

import * as Contracts from ".";

declare module "hardhat/types/runtime" {
  interface HardhatEthersHelpers extends HardhatEthersHelpersBase {
    getContractFactory(
      name: "CartesiMathV2",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.CartesiMathV2__factory>;
    getContractFactory(
      name: "MerkleV2",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.MerkleV2__factory>;
    getContractFactory(
      name: "Ownable",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.Ownable__factory>;
    getContractFactory(
      name: "IERC1155",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IERC1155__factory>;
    getContractFactory(
      name: "IERC1155Receiver",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IERC1155Receiver__factory>;
    getContractFactory(
      name: "ERC1155Holder",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ERC1155Holder__factory>;
    getContractFactory(
      name: "ERC1155Receiver",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ERC1155Receiver__factory>;
    getContractFactory(
      name: "IERC20",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IERC20__factory>;
    getContractFactory(
      name: "IERC721",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IERC721__factory>;
    getContractFactory(
      name: "IERC721Receiver",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IERC721Receiver__factory>;
    getContractFactory(
      name: "ERC721Holder",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ERC721Holder__factory>;
    getContractFactory(
      name: "ERC165",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ERC165__factory>;
    getContractFactory(
      name: "IERC165",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IERC165__factory>;
    getContractFactory(
      name: "AbstractConsensus",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.AbstractConsensus__factory>;
    getContractFactory(
      name: "Authority",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.Authority__factory>;
    getContractFactory(
      name: "IConsensus",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IConsensus__factory>;
    getContractFactory(
      name: "CartesiDApp",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.CartesiDApp__factory>;
    getContractFactory(
      name: "CartesiDAppFactory",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.CartesiDAppFactory__factory>;
    getContractFactory(
      name: "ICartesiDApp",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ICartesiDApp__factory>;
    getContractFactory(
      name: "ICartesiDAppFactory",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ICartesiDAppFactory__factory>;
    getContractFactory(
      name: "History",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.History__factory>;
    getContractFactory(
      name: "IHistory",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IHistory__factory>;
    getContractFactory(
      name: "IInputBox",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IInputBox__factory>;
    getContractFactory(
      name: "IInputRelay",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IInputRelay__factory>;
    getContractFactory(
      name: "InputBox",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.InputBox__factory>;
    getContractFactory(
      name: "InputRelay",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.InputRelay__factory>;
    getContractFactory(
      name: "LibInput",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.LibInput__factory>;
    getContractFactory(
      name: "LibOutputValidation",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.LibOutputValidation__factory>;
    getContractFactory(
      name: "ERC1155BatchPortal",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ERC1155BatchPortal__factory>;
    getContractFactory(
      name: "ERC1155SinglePortal",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ERC1155SinglePortal__factory>;
    getContractFactory(
      name: "ERC20Portal",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ERC20Portal__factory>;
    getContractFactory(
      name: "ERC721Portal",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ERC721Portal__factory>;
    getContractFactory(
      name: "EtherPortal",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.EtherPortal__factory>;
    getContractFactory(
      name: "IERC1155BatchPortal",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IERC1155BatchPortal__factory>;
    getContractFactory(
      name: "IERC1155SinglePortal",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IERC1155SinglePortal__factory>;
    getContractFactory(
      name: "IERC20Portal",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IERC20Portal__factory>;
    getContractFactory(
      name: "IERC721Portal",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IERC721Portal__factory>;
    getContractFactory(
      name: "IEtherPortal",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IEtherPortal__factory>;
    getContractFactory(
      name: "DAppAddressRelay",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.DAppAddressRelay__factory>;
    getContractFactory(
      name: "IDAppAddressRelay",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IDAppAddressRelay__factory>;

    getContractAt(
      name: "CartesiMathV2",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.CartesiMathV2>;
    getContractAt(
      name: "MerkleV2",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.MerkleV2>;
    getContractAt(
      name: "Ownable",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.Ownable>;
    getContractAt(
      name: "IERC1155",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IERC1155>;
    getContractAt(
      name: "IERC1155Receiver",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IERC1155Receiver>;
    getContractAt(
      name: "ERC1155Holder",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ERC1155Holder>;
    getContractAt(
      name: "ERC1155Receiver",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ERC1155Receiver>;
    getContractAt(
      name: "IERC20",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IERC20>;
    getContractAt(
      name: "IERC721",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IERC721>;
    getContractAt(
      name: "IERC721Receiver",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IERC721Receiver>;
    getContractAt(
      name: "ERC721Holder",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ERC721Holder>;
    getContractAt(
      name: "ERC165",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ERC165>;
    getContractAt(
      name: "IERC165",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IERC165>;
    getContractAt(
      name: "AbstractConsensus",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.AbstractConsensus>;
    getContractAt(
      name: "Authority",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.Authority>;
    getContractAt(
      name: "IConsensus",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IConsensus>;
    getContractAt(
      name: "CartesiDApp",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.CartesiDApp>;
    getContractAt(
      name: "CartesiDAppFactory",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.CartesiDAppFactory>;
    getContractAt(
      name: "ICartesiDApp",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ICartesiDApp>;
    getContractAt(
      name: "ICartesiDAppFactory",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ICartesiDAppFactory>;
    getContractAt(
      name: "History",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.History>;
    getContractAt(
      name: "IHistory",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IHistory>;
    getContractAt(
      name: "IInputBox",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IInputBox>;
    getContractAt(
      name: "IInputRelay",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IInputRelay>;
    getContractAt(
      name: "InputBox",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.InputBox>;
    getContractAt(
      name: "InputRelay",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.InputRelay>;
    getContractAt(
      name: "LibInput",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.LibInput>;
    getContractAt(
      name: "LibOutputValidation",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.LibOutputValidation>;
    getContractAt(
      name: "ERC1155BatchPortal",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ERC1155BatchPortal>;
    getContractAt(
      name: "ERC1155SinglePortal",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ERC1155SinglePortal>;
    getContractAt(
      name: "ERC20Portal",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ERC20Portal>;
    getContractAt(
      name: "ERC721Portal",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ERC721Portal>;
    getContractAt(
      name: "EtherPortal",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.EtherPortal>;
    getContractAt(
      name: "IERC1155BatchPortal",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IERC1155BatchPortal>;
    getContractAt(
      name: "IERC1155SinglePortal",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IERC1155SinglePortal>;
    getContractAt(
      name: "IERC20Portal",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IERC20Portal>;
    getContractAt(
      name: "IERC721Portal",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IERC721Portal>;
    getContractAt(
      name: "IEtherPortal",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IEtherPortal>;
    getContractAt(
      name: "DAppAddressRelay",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.DAppAddressRelay>;
    getContractAt(
      name: "IDAppAddressRelay",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IDAppAddressRelay>;

    // default types
    getContractFactory(
      name: string,
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<ethers.ContractFactory>;
    getContractFactory(
      abi: any[],
      bytecode: ethers.utils.BytesLike,
      signer?: ethers.Signer
    ): Promise<ethers.ContractFactory>;
    getContractAt(
      nameOrAbi: string | any[],
      address: string,
      signer?: ethers.Signer
    ): Promise<ethers.Contract>;
  }
}
