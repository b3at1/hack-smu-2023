import { Signer } from "ethers";
import type { Provider } from "@ethersproject/providers";
import type { ICartesiDApp, ICartesiDAppInterface } from "../../../contracts/dapp/ICartesiDApp";
export declare class ICartesiDApp__factory {
    static readonly abi: readonly [{
        readonly anonymous: false;
        readonly inputs: readonly [{
            readonly indexed: false;
            readonly internalType: "contract IConsensus";
            readonly name: "newConsensus";
            readonly type: "address";
        }];
        readonly name: "NewConsensus";
        readonly type: "event";
    }, {
        readonly anonymous: false;
        readonly inputs: readonly [{
            readonly indexed: false;
            readonly internalType: "uint256";
            readonly name: "voucherId";
            readonly type: "uint256";
        }];
        readonly name: "VoucherExecuted";
        readonly type: "event";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "address";
            readonly name: "_destination";
            readonly type: "address";
        }, {
            readonly internalType: "bytes";
            readonly name: "_payload";
            readonly type: "bytes";
        }, {
            readonly components: readonly [{
                readonly components: readonly [{
                    readonly internalType: "uint64";
                    readonly name: "inputIndexWithinEpoch";
                    readonly type: "uint64";
                }, {
                    readonly internalType: "uint64";
                    readonly name: "outputIndexWithinInput";
                    readonly type: "uint64";
                }, {
                    readonly internalType: "bytes32";
                    readonly name: "outputHashesRootHash";
                    readonly type: "bytes32";
                }, {
                    readonly internalType: "bytes32";
                    readonly name: "vouchersEpochRootHash";
                    readonly type: "bytes32";
                }, {
                    readonly internalType: "bytes32";
                    readonly name: "noticesEpochRootHash";
                    readonly type: "bytes32";
                }, {
                    readonly internalType: "bytes32";
                    readonly name: "machineStateHash";
                    readonly type: "bytes32";
                }, {
                    readonly internalType: "bytes32[]";
                    readonly name: "outputHashInOutputHashesSiblings";
                    readonly type: "bytes32[]";
                }, {
                    readonly internalType: "bytes32[]";
                    readonly name: "outputHashesInEpochSiblings";
                    readonly type: "bytes32[]";
                }];
                readonly internalType: "struct OutputValidityProof";
                readonly name: "validity";
                readonly type: "tuple";
            }, {
                readonly internalType: "bytes";
                readonly name: "context";
                readonly type: "bytes";
            }];
            readonly internalType: "struct Proof";
            readonly name: "_proof";
            readonly type: "tuple";
        }];
        readonly name: "executeVoucher";
        readonly outputs: readonly [{
            readonly internalType: "bool";
            readonly name: "";
            readonly type: "bool";
        }];
        readonly stateMutability: "nonpayable";
        readonly type: "function";
    }, {
        readonly inputs: readonly [];
        readonly name: "getConsensus";
        readonly outputs: readonly [{
            readonly internalType: "contract IConsensus";
            readonly name: "";
            readonly type: "address";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [];
        readonly name: "getTemplateHash";
        readonly outputs: readonly [{
            readonly internalType: "bytes32";
            readonly name: "";
            readonly type: "bytes32";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "contract IConsensus";
            readonly name: "_newConsensus";
            readonly type: "address";
        }];
        readonly name: "migrateToConsensus";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "bytes";
            readonly name: "_notice";
            readonly type: "bytes";
        }, {
            readonly components: readonly [{
                readonly components: readonly [{
                    readonly internalType: "uint64";
                    readonly name: "inputIndexWithinEpoch";
                    readonly type: "uint64";
                }, {
                    readonly internalType: "uint64";
                    readonly name: "outputIndexWithinInput";
                    readonly type: "uint64";
                }, {
                    readonly internalType: "bytes32";
                    readonly name: "outputHashesRootHash";
                    readonly type: "bytes32";
                }, {
                    readonly internalType: "bytes32";
                    readonly name: "vouchersEpochRootHash";
                    readonly type: "bytes32";
                }, {
                    readonly internalType: "bytes32";
                    readonly name: "noticesEpochRootHash";
                    readonly type: "bytes32";
                }, {
                    readonly internalType: "bytes32";
                    readonly name: "machineStateHash";
                    readonly type: "bytes32";
                }, {
                    readonly internalType: "bytes32[]";
                    readonly name: "outputHashInOutputHashesSiblings";
                    readonly type: "bytes32[]";
                }, {
                    readonly internalType: "bytes32[]";
                    readonly name: "outputHashesInEpochSiblings";
                    readonly type: "bytes32[]";
                }];
                readonly internalType: "struct OutputValidityProof";
                readonly name: "validity";
                readonly type: "tuple";
            }, {
                readonly internalType: "bytes";
                readonly name: "context";
                readonly type: "bytes";
            }];
            readonly internalType: "struct Proof";
            readonly name: "_proof";
            readonly type: "tuple";
        }];
        readonly name: "validateNotice";
        readonly outputs: readonly [{
            readonly internalType: "bool";
            readonly name: "";
            readonly type: "bool";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "uint256";
            readonly name: "_inputIndex";
            readonly type: "uint256";
        }, {
            readonly internalType: "uint256";
            readonly name: "_outputIndexWithinInput";
            readonly type: "uint256";
        }];
        readonly name: "wasVoucherExecuted";
        readonly outputs: readonly [{
            readonly internalType: "bool";
            readonly name: "";
            readonly type: "bool";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }];
    static createInterface(): ICartesiDAppInterface;
    static connect(address: string, signerOrProvider: Signer | Provider): ICartesiDApp;
}
