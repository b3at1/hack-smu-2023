import { Signer, ContractFactory, Overrides } from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type { LibInput, LibInputInterface } from "../../../contracts/library/LibInput";
type LibInputConstructorParams = [signer?: Signer] | ConstructorParameters<typeof ContractFactory>;
export declare class LibInput__factory extends ContractFactory {
    constructor(...args: LibInputConstructorParams);
    deploy(overrides?: Overrides & {
        from?: string;
    }): Promise<LibInput>;
    getDeployTransaction(overrides?: Overrides & {
        from?: string;
    }): TransactionRequest;
    attach(address: string): LibInput;
    connect(signer: Signer): LibInput__factory;
    static readonly bytecode = "0x60566037600b82828239805160001a607314602a57634e487b7160e01b600052600060045260246000fd5b30600052607381538281f3fe73000000000000000000000000000000000000000030146080604052600080fdfea2646970667358221220fc9463db1bedbafa75fed2fe658949ee0cfd524c4366be049aa95928562c80ec64736f6c63430008130033";
    static readonly abi: readonly [{
        readonly inputs: readonly [];
        readonly name: "InputSizeExceedsLimit";
        readonly type: "error";
    }];
    static createInterface(): LibInputInterface;
    static connect(address: string, signerOrProvider: Signer | Provider): LibInput;
}
export {};
