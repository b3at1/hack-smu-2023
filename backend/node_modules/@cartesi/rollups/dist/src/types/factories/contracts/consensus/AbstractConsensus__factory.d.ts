import { Signer } from "ethers";
import type { Provider } from "@ethersproject/providers";
import type { AbstractConsensus, AbstractConsensusInterface } from "../../../contracts/consensus/AbstractConsensus";
export declare class AbstractConsensus__factory {
    static readonly abi: readonly [{
        readonly anonymous: false;
        readonly inputs: readonly [{
            readonly indexed: false;
            readonly internalType: "address";
            readonly name: "application";
            readonly type: "address";
        }];
        readonly name: "ApplicationJoined";
        readonly type: "event";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "address";
            readonly name: "_dapp";
            readonly type: "address";
        }, {
            readonly internalType: "bytes";
            readonly name: "_proofContext";
            readonly type: "bytes";
        }];
        readonly name: "getClaim";
        readonly outputs: readonly [{
            readonly internalType: "bytes32";
            readonly name: "epochHash_";
            readonly type: "bytes32";
        }, {
            readonly internalType: "uint256";
            readonly name: "firstInputIndex_";
            readonly type: "uint256";
        }, {
            readonly internalType: "uint256";
            readonly name: "lastInputIndex_";
            readonly type: "uint256";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [];
        readonly name: "join";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
        readonly type: "function";
    }];
    static createInterface(): AbstractConsensusInterface;
    static connect(address: string, signerOrProvider: Signer | Provider): AbstractConsensus;
}
