import { Signer, ContractFactory, Overrides } from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type { LibOutputValidation, LibOutputValidationInterface } from "../../../contracts/library/LibOutputValidation";
type LibOutputValidationConstructorParams = [signer?: Signer] | ConstructorParameters<typeof ContractFactory>;
export declare class LibOutputValidation__factory extends ContractFactory {
    constructor(...args: LibOutputValidationConstructorParams);
    deploy(overrides?: Overrides & {
        from?: string;
    }): Promise<LibOutputValidation>;
    getDeployTransaction(overrides?: Overrides & {
        from?: string;
    }): TransactionRequest;
    attach(address: string): LibOutputValidation;
    connect(signer: Signer): LibOutputValidation__factory;
    static readonly bytecode = "0x60566037600b82828239805160001a607314602a57634e487b7160e01b600052600060045260246000fd5b30600052607381538281f3fe73000000000000000000000000000000000000000030146080604052600080fdfea264697066735822122012d1df38d85394b26ba2b48622702197cdc35be000f979ae3bd6440aa6c73afd64736f6c63430008130033";
    static readonly abi: readonly [{
        readonly inputs: readonly [];
        readonly name: "IncorrectEpochHash";
        readonly type: "error";
    }, {
        readonly inputs: readonly [];
        readonly name: "IncorrectOutputHashesRootHash";
        readonly type: "error";
    }, {
        readonly inputs: readonly [];
        readonly name: "IncorrectOutputsEpochRootHash";
        readonly type: "error";
    }, {
        readonly inputs: readonly [];
        readonly name: "InputIndexOutOfClaimBounds";
        readonly type: "error";
    }];
    static createInterface(): LibOutputValidationInterface;
    static connect(address: string, signerOrProvider: Signer | Provider): LibOutputValidation;
}
export {};
